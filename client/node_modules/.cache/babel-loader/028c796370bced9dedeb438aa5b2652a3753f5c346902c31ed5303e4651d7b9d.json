{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { VictoryArea, VictoryChart, VictoryAxis, VictoryVoronoiContainer, VictoryTooltip } from 'victory';\nimport \"./achievements.css\";\nconst Achievements = () => {\n  _s();\n  const allData = [{\n    year: 2020,\n    Ciencias: {\n      Olcoquim: {\n        gold: 2,\n        silver: 1,\n        bronze: 0,\n        mention: 0\n      },\n      Olcofi: {\n        gold: 1,\n        silver: 0,\n        bronze: 1,\n        mention: 1\n      },\n      Olicocibi: {\n        gold: 0,\n        silver: 1,\n        bronze: 1,\n        mention: 0\n      },\n      Astronomía: {\n        gold: 0,\n        silver: 0,\n        bronze: 0,\n        mention: 1\n      }\n    },\n    Tecnología: {\n      Robótica: {\n        gold: 3,\n        silver: 2,\n        bronze: 1,\n        mention: 0\n      },\n      Informática: {\n        gold: 2,\n        silver: 1,\n        bronze: 1,\n        mention: 1\n      }\n    },\n    Arte: {},\n    Graduados: {\n      hombres: 20,\n      mujeres: 8\n    },\n    Otros: {}\n  }];\n  const [selectedCategory, setSelectedCategory] = useState('Ciencias');\n  const [selectedSubCategory, setSelectedSubCategory] = useState(null); // Estado para las subcategorías\n\n  // Opciones de categorías y subcategorías\n  const categories = [\"Ciencias\", \"Tecnología\", \"Graduados\", \"Otros\"];\n  const subCategories = selectedCategory !== 'Graduados' ? Object.keys(allData[0][selectedCategory] || {}) : ['hombres', 'mujeres'];\n\n  // Filtrado de datos basado en la categoría y subcategoría seleccionada\n  const filteredData = allData.map(item => {\n    const categoryData = item[selectedCategory];\n    if (selectedCategory === 'Graduados') {\n      return {\n        year: item.year,\n        count: categoryData[selectedSubCategory]\n      };\n    } else if (categoryData && selectedSubCategory) {\n      const subCategoryData = categoryData[selectedSubCategory];\n      return {\n        year: item.year,\n        ...subCategoryData\n      }; // Esparce las medallas\n    }\n    return {\n      year: item.year\n    }; // Devuelve solo el año si no hay subcategoría seleccionada\n  }).filter(item => item.year); // Filtra los años sin datos\n\n  v;\n};\n_s(Achievements, \"QQaxShsay8Hp8OjBnoGjbnLgNrI=\");\n_c = Achievements;\nexport default Achievements;\nvar _c;\n$RefreshReg$(_c, \"Achievements\");","map":{"version":3,"names":["React","useState","VictoryArea","VictoryChart","VictoryAxis","VictoryVoronoiContainer","VictoryTooltip","Achievements","_s","allData","year","Ciencias","Olcoquim","gold","silver","bronze","mention","Olcofi","Olicocibi","Astronomía","Tecnología","Robótica","Informática","Arte","Graduados","hombres","mujeres","Otros","selectedCategory","setSelectedCategory","selectedSubCategory","setSelectedSubCategory","categories","subCategories","Object","keys","filteredData","map","item","categoryData","count","subCategoryData","filter","v","_c","$RefreshReg$"],"sources":["C:/Users/allan/OneDrive/Documentos/ccalajuela_web/client/src/pages/achievements/achievements.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { VictoryArea, VictoryChart, VictoryAxis, VictoryVoronoiContainer, VictoryTooltip } from 'victory';\r\nimport \"./achievements.css\";\r\n\r\nconst Achievements = () => {\r\n    const allData = [\r\n        { \r\n            year: 2020, \r\n            Ciencias: { \r\n                Olcoquim: { gold: 2, silver: 1, bronze: 0, mention: 0 },\r\n                Olcofi: { gold: 1, silver: 0, bronze: 1, mention: 1 },\r\n                Olicocibi: { gold: 0, silver: 1, bronze: 1, mention: 0 },\r\n                Astronomía: { gold: 0, silver: 0, bronze: 0, mention: 1 },\r\n            },\r\n            Tecnología: { \r\n                Robótica: { gold: 3, silver: 2, bronze: 1, mention: 0 },\r\n                Informática: { gold: 2, silver: 1, bronze: 1, mention: 1 },\r\n            },\r\n            Arte: {\r\n            },\r\n            Graduados: {\r\n                hombres: 20,\r\n                mujeres: 8\r\n            },\r\n            Otros: {\r\n            }\r\n        },\r\n    ];\r\n    \r\n\r\n    const [selectedCategory, setSelectedCategory] = useState('Ciencias');\r\n    const [selectedSubCategory, setSelectedSubCategory] = useState(null); // Estado para las subcategorías\r\n\r\n    // Opciones de categorías y subcategorías\r\n    const categories = [\"Ciencias\", \"Tecnología\", \"Graduados\", \"Otros\"];\r\n    const subCategories = selectedCategory !== 'Graduados' \r\n        ? Object.keys(allData[0][selectedCategory] || {}) \r\n        : ['hombres', 'mujeres'];\r\n\r\n    // Filtrado de datos basado en la categoría y subcategoría seleccionada\r\n    const filteredData = allData.map(item => {\r\n        const categoryData = item[selectedCategory];\r\n        if (selectedCategory === 'Graduados') {\r\n            return { year: item.year, count: categoryData[selectedSubCategory] };\r\n        } else if (categoryData && selectedSubCategory) {\r\n            const subCategoryData = categoryData[selectedSubCategory];\r\n            return { year: item.year, ...subCategoryData }; // Esparce las medallas\r\n        }\r\n        return { year: item.year }; // Devuelve solo el año si no hay subcategoría seleccionada\r\n    }).filter(item => item.year); // Filtra los años sin datos\r\n\r\nv\r\n}\r\n\r\nexport default Achievements;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}