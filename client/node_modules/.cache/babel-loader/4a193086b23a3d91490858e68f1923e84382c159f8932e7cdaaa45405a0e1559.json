{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\allan\\\\OneDrive\\\\Documentos\\\\ccalajuela_web\\\\client\\\\src\\\\pages\\\\achievements\\\\achievements.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { VictoryBar, VictoryChart } from 'victory';\nimport \"./achievements.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Achievements = () => {\n  _s();\n  const allData = [{\n    year: 2020,\n    category: 'ciencias',\n    achievements: 5,\n    name: \"Premio A\"\n  }, {\n    year: 2021,\n    category: 'tecnología',\n    achievements: 3,\n    name: \"Premio B\"\n  }\n  // ... más datos ...\n  ];\n  const getFilteredData = (selectedCategory, selectedYear) => {\n    // Si la categoría es 'global', puedes decidir qué datos mostrar. \n    // Aquí, por simplicidad, devolvemos todos los datos:\n    if (selectedCategory === 'global') {\n      return allData;\n    }\n    // Filtrar datos por categoría y año seleccionado\n    return allData.filter(item => item.category === selectedCategory && item.year.toString() === selectedYear);\n  };\n  const [selectedCategory, setSelectedCategory] = useState('global');\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const categories = [\"ciencias\", \"tecnología\", \"arte\", \"otras\"];\n  const years = Array.from({\n    length: 19\n  }, (_, i) => 2006 + i); // Del 2006 al 2024\n\n  const handleCategoryChange = event => {\n    setSelectedCategory(event.target.value);\n    // Restablecer el año o establecer un valor predeterminado si es necesario\n  };\n  const handleYearChange = event => {\n    setSelectedYear(event.target.value);\n  };\n\n  // Función para obtener los datos filtrados (debes definirla según tus datos)\n  const filteredData = getFilteredData(selectedCategory, selectedYear);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"achievements-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleCategoryChange,\n      value: selectedCategory,\n      children: categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: category,\n        children: category\n      }, category, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleYearChange,\n      value: selectedYear,\n      children: years.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: year,\n        children: year\n      }, year, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(VictoryChart, {\n        children: /*#__PURE__*/_jsxDEV(VictoryBar, {\n          data: filteredData,\n          x: \"nombrePremio\",\n          y: \"cantidad\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(Achievements, \"CfIWbkrm8vopwQ3z8WXsrTi5rXg=\");\n_c = Achievements;\nexport default Achievements;\nvar _c;\n$RefreshReg$(_c, \"Achievements\");","map":{"version":3,"names":["React","useState","VictoryBar","VictoryChart","jsxDEV","_jsxDEV","Achievements","_s","allData","year","category","achievements","name","getFilteredData","selectedCategory","selectedYear","filter","item","toString","setSelectedCategory","setSelectedYear","Date","getFullYear","categories","years","Array","from","length","_","i","handleCategoryChange","event","target","value","handleYearChange","filteredData","className","children","onChange","map","fileName","_jsxFileName","lineNumber","columnNumber","data","x","y","_c","$RefreshReg$"],"sources":["C:/Users/allan/OneDrive/Documentos/ccalajuela_web/client/src/pages/achievements/achievements.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { VictoryBar, VictoryChart } from 'victory';\r\nimport \"./achievements.css\";\r\n\r\nconst Achievements = () => {\r\n\r\n    const allData = [\r\n        { year: 2020, category: 'ciencias', achievements: 5, name: \"Premio A\" },\r\n        { year: 2021, category: 'tecnología', achievements: 3, name: \"Premio B\" },\r\n        // ... más datos ...\r\n    ];\r\n    \r\n    const getFilteredData = (selectedCategory, selectedYear) => {\r\n        // Si la categoría es 'global', puedes decidir qué datos mostrar. \r\n        // Aquí, por simplicidad, devolvemos todos los datos:\r\n        if (selectedCategory === 'global') {\r\n            return allData;\r\n        }\r\n        // Filtrar datos por categoría y año seleccionado\r\n        return allData.filter(item => \r\n            item.category === selectedCategory && item.year.toString() === selectedYear\r\n        );\r\n    };\r\n    \r\n    const [selectedCategory, setSelectedCategory] = useState('global');\r\n    const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n\r\n    const categories = [\"ciencias\", \"tecnología\", \"arte\", \"otras\"];\r\n    const years = Array.from({length: 19}, (_, i) => 2006 + i); // Del 2006 al 2024\r\n\r\n    const handleCategoryChange = (event) => {\r\n        setSelectedCategory(event.target.value);\r\n        // Restablecer el año o establecer un valor predeterminado si es necesario\r\n    };\r\n\r\n    const handleYearChange = (event) => {\r\n        setSelectedYear(event.target.value);\r\n    };\r\n\r\n    // Función para obtener los datos filtrados (debes definirla según tus datos)\r\n    const filteredData = getFilteredData(selectedCategory, selectedYear);\r\n\r\n    return (\r\n        <div className=\"achievements-container\">\r\n            {/* Contenido del banner */}\r\n\r\n            {/* Selección de categoría */}\r\n            <select onChange={handleCategoryChange} value={selectedCategory}>\r\n                {categories.map(category => (\r\n                    <option key={category} value={category}>{category}</option>\r\n                ))}\r\n            </select>\r\n\r\n            {/* Selección de año */}\r\n            <select onChange={handleYearChange} value={selectedYear}>\r\n                {years.map(year => (\r\n                    <option key={year} value={year}>{year}</option>\r\n                ))}\r\n            </select>\r\n\r\n            {/* Gráfico de premios */}\r\n            <div className=\"chart-container\">\r\n                {/* Aquí iría tu gráfico VictoryChart con los datos filtrados */}\r\n                <VictoryChart>\r\n                    <VictoryBar data={filteredData} x=\"nombrePremio\" y=\"cantidad\" />\r\n                </VictoryChart>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Achievements;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}